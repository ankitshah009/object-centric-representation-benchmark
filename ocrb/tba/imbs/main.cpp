#include <stdio.h>
#include <time.h>
#include <limits.h>
#include <iostream>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/features2d/features2d.hpp>
#include "imagemanager.h"
#include "imbs.hpp"

using namespace cv;
using namespace std;

template <typename T> inline string toString(T val) {
    stringstream ss;
    ss << val;
    return ss.str();
}


int main(int argc, char *argv[]) {
    cout << "Initializing Parameters ..." << endl;
    int camera_id = 0;
    int vis = 0; // visualize
    if (argc == 3) {
        if (strcmp(argv[1], "-c") == 0) {
            camera_id = atof(argv[2]);
        }
    }
    else if (argc == 5) {
        if (strcmp(argv[1], "-c") == 0) {
            camera_id = atof(argv[2]);
        }
        if (strcmp(argv[3], "-v") == 0) {
            vis = atof(argv[4]);
        }
    }

    double fps = 10; // default fps
    int step = 60 / int(fps); // sample interval

    string task_dir = "../../data/duke/";
    string raw_dir = task_dir + "frames/camera" + toString(camera_id) + "/";

    string fg_mask_dir = task_dir + "imbs/fg_mask/camera" + toString(camera_id) + "/";
    string bg_dir = task_dir + "imbs/bg/camera" + toString(camera_id) + "/";

    // for visualization
    int h = 288, w = 512;
    if (vis == 1) {
        namedWindow("raw", WINDOW_NORMAL);
	    namedWindow("fg mask", WINDOW_NORMAL);
	    // namedWindow("bg", WINDOW_NORMAL);
        resizeWindow("raw", w, h);
        resizeWindow("fg mask", w, h);
        // resizeWindow("bg", w, h);
    }

    cout << "Initializing IMBS ..." << endl;
    ImageManager *im = new ImageManager(raw_dir);
    string raw_filename = im->current(0);
    Mat raw = imread(raw_dir + raw_filename); //raw image
    Mat fg_mask; // foreground mask generated by IMBS method
    Mat bg;   // background iamge generated by IMBS method
    BackgroundSubtractorIMBS *pIMBS = new BackgroundSubtractorIMBS(fps); // IMBS Background Subtractor
    cout << "Processing data ..." << endl;

    for (int i = 0; i < im->end; i += step) {
        raw_filename = im->next(step); // read the next raw image
        raw = imread(raw_dir + raw_filename);

        // Get foreground masks and threshold them
        bool bg_ready = pIMBS->apply(raw, fg_mask);
        Mat fg_mask_binary = (fg_mask > 127);
        // Get background images
        pIMBS->getBackgroundImage(bg); 

        // Save
        if (bg_ready) {
            if (vis != 1) {
                imwrite(fg_mask_dir + raw_filename, fg_mask_binary);
                imwrite(bg_dir      + raw_filename, bg);
            }
            cout << i+1 << " / " << im->end << "    " << raw_filename << endl;
        }
        else {
            cout << i+1 << " / " << im->end << endl;
        }

        // Visualize
        if (vis == 1) {
            imshow("raw", raw);
            imshow("fg mask", fg_mask_binary);
            // imshow("bg", bg);
            waitKey(1);
        }
    }
	return EXIT_SUCCESS;
}